%%   Autogenerated code. Do not edit.
%%
%%   The contents of this file are subject to the Mozilla Public License
%%   Version 1.1 (the "License"); you may not use this file except in
%%   compliance with the License. You may obtain a copy of the License at
%%   http://www.mozilla.org/MPL/
%%
%%   Software distributed under the License is distributed on an "AS IS"
%%   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
%%   License for the specific language governing rights and limitations
%%   under the License.
%%
%%   The Original Code is RabbitMQ.
%%
%%   The Initial Developers of the Original Code are LShift Ltd,
%%   Cohesive Financial Technologies LLC, and Rabbit Technologies Ltd.
%%
%%   Portions created before 22-Nov-2008 00:00:00 GMT by LShift Ltd,
%%   Cohesive Financial Technologies LLC, or Rabbit Technologies Ltd
%%   are Copyright (C) 2007-2008 LShift Ltd, Cohesive Financial
%%   Technologies LLC, and Rabbit Technologies Ltd.
%%
%%   Portions created by LShift Ltd are Copyright (C) 2007-2010 LShift
%%   Ltd. Portions created by Cohesive Financial Technologies LLC are
%%   Copyright (C) 2007-2010 Cohesive Financial Technologies
%%   LLC. Portions created by Rabbit Technologies Ltd are Copyright
%%   (C) 2007-2010 Rabbit Technologies Ltd.
%%
%%   All Rights Reserved.
%%
%%   Contributor(s): ______________________________________.
%%
-define(PROTOCOL_VERSION_MAJOR, 8).
-define(PROTOCOL_VERSION_MINOR, 0).
-define(PROTOCOL_PORT, 5672).
-define(FRAME_METHOD, 1).
-define(FRAME_HEADER, 2).
-define(FRAME_BODY, 3).
-define(FRAME_OOB_METHOD, 4).
-define(FRAME_OOB_HEADER, 5).
-define(FRAME_OOB_BODY, 6).
-define(FRAME_TRACE, 7).
-define(FRAME_HEARTBEAT, 8).
-define(FRAME_MIN_SIZE, 4096).
-define(FRAME_END, 206).
-define(REPLY_SUCCESS, 200).
-define(NOT_DELIVERED, 310).
-define(CONTENT_TOO_LARGE, 311).
-define(NO_ROUTE, 312).
-define(NO_CONSUMERS, 313).
-define(ACCESS_REFUSED, 403).
-define(NOT_FOUND, 404).
-define(RESOURCE_LOCKED, 405).
-define(PRECONDITION_FAILED, 406).
-define(CONNECTION_FORCED, 320).
-define(INVALID_PATH, 402).
-define(FRAME_ERROR, 501).
-define(SYNTAX_ERROR, 502).
-define(COMMAND_INVALID, 503).
-define(CHANNEL_ERROR, 504).
-define(RESOURCE_ERROR, 506).
-define(NOT_ALLOWED, 530).
-define(NOT_IMPLEMENTED, 540).
-define(INTERNAL_ERROR, 541).
%% Method field records.
-record('connection.start', {version_major = 0, version_minor = 8, server_properties, mechanisms = <<"PLAIN">>, locales = <<"en_US">>}).
-record('connection.start_ok', {client_properties, mechanism = <<"PLAIN">>, response, locale = <<"en_US">>}).
-record('connection.secure', {challenge}).
-record('connection.secure_ok', {response}).
-record('connection.tune', {channel_max = 0, frame_max = 0, heartbeat = 0}).
-record('connection.tune_ok', {channel_max = 0, frame_max = 0, heartbeat = 0}).
-record('connection.open', {virtual_host = <<"/">>, capabilities = <<"">>, insist = false}).
-record('connection.open_ok', {known_hosts = <<"">>}).
-record('connection.redirect', {host, known_hosts = <<"">>}).
-record('connection.close', {reply_code, reply_text = <<"">>, class_id, method_id}).
-record('connection.close_ok', {}).
-record('channel.open', {out_of_band = <<"">>}).
-record('channel.open_ok', {}).
-record('channel.flow', {active}).
-record('channel.flow_ok', {active}).
-record('channel.alert', {reply_code, reply_text = <<"">>, details = []}).
-record('channel.close', {reply_code, reply_text = <<"">>, class_id, method_id}).
-record('channel.close_ok', {}).
-record('access.request', {realm = <<"/data">>, exclusive = false, passive = true, active = true, write = true, read = true}).
-record('access.request_ok', {ticket = 1}).
-record('exchange.declare', {ticket = 1, exchange, type = <<"direct">>, passive = false, durable = false, auto_delete = false, internal = false, nowait = false, arguments = []}).
-record('exchange.declare_ok', {}).
-record('exchange.delete', {ticket = 1, exchange, if_unused = false, nowait = false}).
-record('exchange.delete_ok', {}).
-record('queue.declare', {ticket = 1, queue = <<"">>, passive = false, durable = false, exclusive = false, auto_delete = false, nowait = false, arguments = []}).
-record('queue.declare_ok', {queue, message_count, consumer_count}).
-record('queue.bind', {ticket = 1, queue, exchange, routing_key = <<"">>, nowait = false, arguments = []}).
-record('queue.bind_ok', {}).
-record('queue.purge', {ticket = 1, queue, nowait = false}).
-record('queue.purge_ok', {message_count}).
-record('queue.delete', {ticket = 1, queue, if_unused = false, if_empty = false, nowait = false}).
-record('queue.delete_ok', {message_count}).
-record('queue.unbind', {ticket = 1, queue, exchange, routing_key = <<"">>, arguments = []}).
-record('queue.unbind_ok', {}).
-record('basic.qos', {prefetch_size = 0, prefetch_count = 0, global = false}).
-record('basic.qos_ok', {}).
-record('basic.consume', {ticket = 1, queue, consumer_tag = <<"">>, no_local = false, no_ack = false, exclusive = false, nowait = false}).
-record('basic.consume_ok', {consumer_tag}).
-record('basic.cancel', {consumer_tag, nowait = false}).
-record('basic.cancel_ok', {consumer_tag}).
-record('basic.publish', {ticket = 1, exchange = <<"">>, routing_key = <<"">>, mandatory = false, immediate = false}).
-record('basic.return', {reply_code, reply_text = <<"">>, exchange, routing_key}).
-record('basic.deliver', {consumer_tag, delivery_tag, redelivered = false, exchange, routing_key}).
-record('basic.get', {ticket = 1, queue, no_ack = false}).
-record('basic.get_ok', {delivery_tag, redelivered = false, exchange, routing_key, message_count}).
-record('basic.get_empty', {cluster_id = <<"">>}).
-record('basic.ack', {delivery_tag = 0, multiple = false}).
-record('basic.reject', {delivery_tag, requeue = true}).
-record('basic.recover_async', {requeue = false}).
-record('basic.recover', {requeue = false}).
-record('basic.recover_ok', {}).
-record('file.qos', {prefetch_size = 0, prefetch_count = 0, global = false}).
-record('file.qos_ok', {}).
-record('file.consume', {ticket = 1, queue, consumer_tag = <<"">>, no_local = false, no_ack = false, exclusive = false, nowait = false}).
-record('file.consume_ok', {consumer_tag}).
-record('file.cancel', {consumer_tag, nowait = false}).
-record('file.cancel_ok', {consumer_tag}).
-record('file.open', {identifier, content_size}).
-record('file.open_ok', {staged_size}).
-record('file.stage', {}).
-record('file.publish', {ticket = 1, exchange = <<"">>, routing_key = <<"">>, mandatory = false, immediate = false, identifier}).
-record('file.return', {reply_code = 200, reply_text = <<"">>, exchange, routing_key}).
-record('file.deliver', {consumer_tag, delivery_tag, redelivered = false, exchange, routing_key, identifier}).
-record('file.ack', {delivery_tag = 0, multiple = false}).
-record('file.reject', {delivery_tag, requeue = true}).
-record('stream.qos', {prefetch_size = 0, prefetch_count = 0, consume_rate = 0, global = false}).
-record('stream.qos_ok', {}).
-record('stream.consume', {ticket = 1, queue, consumer_tag = <<"">>, no_local = false, exclusive = false, nowait = false}).
-record('stream.consume_ok', {consumer_tag}).
-record('stream.cancel', {consumer_tag, nowait = false}).
-record('stream.cancel_ok', {consumer_tag}).
-record('stream.publish', {ticket = 1, exchange = <<"">>, routing_key = <<"">>, mandatory = false, immediate = false}).
-record('stream.return', {reply_code = 200, reply_text = <<"">>, exchange, routing_key}).
-record('stream.deliver', {consumer_tag, delivery_tag, exchange, queue}).
-record('tx.select', {}).
-record('tx.select_ok', {}).
-record('tx.commit', {}).
-record('tx.commit_ok', {}).
-record('tx.rollback', {}).
-record('tx.rollback_ok', {}).
-record('dtx.select', {}).
-record('dtx.select_ok', {}).
-record('dtx.start', {dtx_identifier}).
-record('dtx.start_ok', {}).
-record('tunnel.request', {meta_data}).
-record('test.integer', {integer_1, integer_2, integer_3, integer_4, operation}).
-record('test.integer_ok', {result}).
-record('test.string', {string_1, string_2, operation}).
-record('test.string_ok', {result}).
-record('test.table', {table, integer_op, string_op}).
-record('test.table_ok', {integer_result, string_result}).
-record('test.content', {}).
-record('test.content_ok', {content_checksum}).
%% Class property records.
-record('P_connection', {}).
-record('P_channel', {}).
-record('P_access', {}).
-record('P_exchange', {}).
-record('P_queue', {}).
-record('P_basic', {content_type, content_encoding, headers, delivery_mode, priority, correlation_id, reply_to, expiration, message_id, timestamp, type, user_id, app_id, cluster_id}).
-record('P_file', {content_type, content_encoding, headers, priority, reply_to, message_id, filename, timestamp, cluster_id}).
-record('P_stream', {content_type, content_encoding, headers, priority, timestamp}).
-record('P_tx', {}).
-record('P_dtx', {}).
-record('P_tunnel', {headers, proxy_name, data_name, durable, broadcast}).
-record('P_test', {}).
-ifdef(use_specs).
%% Various types
-type(amqp_method_name() ::
       ( 'connection.start' | 'connection.start_ok' | 'connection.secure' | 'connection.secure_ok'
       | 'connection.tune' | 'connection.tune_ok' | 'connection.open' | 'connection.open_ok'
       | 'connection.redirect' | 'connection.close' | 'connection.close_ok' | 'channel.open'
       | 'channel.open_ok' | 'channel.flow' | 'channel.flow_ok' | 'channel.alert'
       | 'channel.close' | 'channel.close_ok' | 'access.request' | 'access.request_ok'
       | 'exchange.declare' | 'exchange.declare_ok' | 'exchange.delete' | 'exchange.delete_ok'
       | 'queue.declare' | 'queue.declare_ok' | 'queue.bind' | 'queue.bind_ok'
       | 'queue.purge' | 'queue.purge_ok' | 'queue.delete' | 'queue.delete_ok'
       | 'queue.unbind' | 'queue.unbind_ok' | 'basic.qos' | 'basic.qos_ok'
       | 'basic.consume' | 'basic.consume_ok' | 'basic.cancel' | 'basic.cancel_ok'
       | 'basic.publish' | 'basic.return' | 'basic.deliver' | 'basic.get'
       | 'basic.get_ok' | 'basic.get_empty' | 'basic.ack' | 'basic.reject'
       | 'basic.recover_async' | 'basic.recover' | 'basic.recover_ok' | 'file.qos'
       | 'file.qos_ok' | 'file.consume' | 'file.consume_ok' | 'file.cancel'
       | 'file.cancel_ok' | 'file.open' | 'file.open_ok' | 'file.stage'
       | 'file.publish' | 'file.return' | 'file.deliver' | 'file.ack'
       | 'file.reject' | 'stream.qos' | 'stream.qos_ok' | 'stream.consume'
       | 'stream.consume_ok' | 'stream.cancel' | 'stream.cancel_ok' | 'stream.publish'
       | 'stream.return' | 'stream.deliver' | 'tx.select' | 'tx.select_ok'
       | 'tx.commit' | 'tx.commit_ok' | 'tx.rollback' | 'tx.rollback_ok'
       | 'dtx.select' | 'dtx.select_ok' | 'dtx.start' | 'dtx.start_ok'
       | 'tunnel.request' | 'test.integer' | 'test.integer_ok' | 'test.string'
       | 'test.string_ok' | 'test.table' | 'test.table_ok' | 'test.content'
       | 'test.content_ok' )).
-type(amqp_method() ::
       ( {10, 10} | {10, 11} | {10, 20} | {10, 21} | {10, 30} | {10, 31}
       | {10, 40} | {10, 41} | {10, 50} | {10, 60} | {10, 61} | {20, 10}
       | {20, 11} | {20, 20} | {20, 21} | {20, 30} | {20, 40} | {20, 41}
       | {30, 10} | {30, 11} | {40, 10} | {40, 11} | {40, 20} | {40, 21}
       | {50, 10} | {50, 11} | {50, 20} | {50, 21} | {50, 30} | {50, 31}
       | {50, 40} | {50, 41} | {50, 50} | {50, 51} | {60, 10} | {60, 11}
       | {60, 20} | {60, 21} | {60, 30} | {60, 31} | {60, 40} | {60, 50}
       | {60, 60} | {60, 70} | {60, 71} | {60, 72} | {60, 80} | {60, 90}
       | {60, 100} | {60, 110} | {60, 111} | {70, 10} | {70, 11} | {70, 20}
       | {70, 21} | {70, 30} | {70, 31} | {70, 40} | {70, 41} | {70, 50}
       | {70, 60} | {70, 70} | {70, 80} | {70, 90} | {70, 100} | {80, 10}
       | {80, 11} | {80, 20} | {80, 21} | {80, 30} | {80, 31} | {80, 40}
       | {80, 50} | {80, 60} | {90, 10} | {90, 11} | {90, 20} | {90, 21}
       | {90, 30} | {90, 31} | {100, 10} | {100, 11} | {100, 20} | {100, 21}
       | {110, 10} | {120, 10} | {120, 11} | {120, 20} | {120, 21} | {120, 30}
       | {120, 31} | {120, 40} | {120, 41} )).
-type(amqp_method_record() ::
       ( #'connection.start'{} | #'connection.start_ok'{} | #'connection.secure'{} | #'connection.secure_ok'{}
       | #'connection.tune'{} | #'connection.tune_ok'{} | #'connection.open'{} | #'connection.open_ok'{}
       | #'connection.redirect'{} | #'connection.close'{} | #'connection.close_ok'{} | #'channel.open'{}
       | #'channel.open_ok'{} | #'channel.flow'{} | #'channel.flow_ok'{} | #'channel.alert'{}
       | #'channel.close'{} | #'channel.close_ok'{} | #'access.request'{} | #'access.request_ok'{}
       | #'exchange.declare'{} | #'exchange.declare_ok'{} | #'exchange.delete'{} | #'exchange.delete_ok'{}
       | #'queue.declare'{} | #'queue.declare_ok'{} | #'queue.bind'{} | #'queue.bind_ok'{}
       | #'queue.purge'{} | #'queue.purge_ok'{} | #'queue.delete'{} | #'queue.delete_ok'{}
       | #'queue.unbind'{} | #'queue.unbind_ok'{} | #'basic.qos'{} | #'basic.qos_ok'{}
       | #'basic.consume'{} | #'basic.consume_ok'{} | #'basic.cancel'{} | #'basic.cancel_ok'{}
       | #'basic.publish'{} | #'basic.return'{} | #'basic.deliver'{} | #'basic.get'{}
       | #'basic.get_ok'{} | #'basic.get_empty'{} | #'basic.ack'{} | #'basic.reject'{}
       | #'basic.recover_async'{} | #'basic.recover'{} | #'basic.recover_ok'{} | #'file.qos'{}
       | #'file.qos_ok'{} | #'file.consume'{} | #'file.consume_ok'{} | #'file.cancel'{}
       | #'file.cancel_ok'{} | #'file.open'{} | #'file.open_ok'{} | #'file.stage'{}
       | #'file.publish'{} | #'file.return'{} | #'file.deliver'{} | #'file.ack'{}
       | #'file.reject'{} | #'stream.qos'{} | #'stream.qos_ok'{} | #'stream.consume'{}
       | #'stream.consume_ok'{} | #'stream.cancel'{} | #'stream.cancel_ok'{} | #'stream.publish'{}
       | #'stream.return'{} | #'stream.deliver'{} | #'tx.select'{} | #'tx.select_ok'{}
       | #'tx.commit'{} | #'tx.commit_ok'{} | #'tx.rollback'{} | #'tx.rollback_ok'{}
       | #'dtx.select'{} | #'dtx.select_ok'{} | #'dtx.start'{} | #'dtx.start_ok'{}
       | #'tunnel.request'{} | #'test.integer'{} | #'test.integer_ok'{} | #'test.string'{}
       | #'test.string_ok'{} | #'test.table'{} | #'test.table_ok'{} | #'test.content'{}
       | #'test.content_ok'{} )).
-type(amqp_method_field_name() ::
       ( reply_code | ticket | routing_key | consumer_tag
       | virtual_host | multiple | prefetch_count | no_local
       | response | reply_code | consumer_tag | consumer_tag
       | if_empty | routing_key | exchange | known_hosts
       | durable | consumer_tag | exchange | frame_max
       | channel_max | version_minor | locale | queue
       | ticket | routing_key | if_unused | client_properties
       | requeue | reply_text | reply_code | exchange
       | insist | reply_text | delivery_tag | string_1
       | consume_rate | queue | routing_key | no_local
       | operation | passive | message_count | mandatory
       | capabilities | no_local | queue | ticket
       | heartbeat | reply_text | global | queue
       | exchange | nowait | mechanisms | delivery_tag
       | mandatory | class_id | delivery_tag | prefetch_count
       | exchange | routing_key | integer_1 | consumer_tag
       | if_unused | table | nowait | out_of_band
       | read | ticket | reply_code | challenge
       | consumer_tag | consumer_tag | nowait | routing_key
       | ticket | integer_4 | consumer_tag | reply_text
       | nowait | queue | ticket | routing_key
       | requeue | ticket | no_ack | active
       | internal | exclusive | method_id | integer_result
       | reply_code | reply_code | nowait | exchange
       | delivery_tag | consumer_count | reply_text | exclusive
       | exchange | exclusive | consumer_tag | staged_size
       | multiple | delivery_tag | ticket | immediate
       | requeue | global | arguments | no_ack
       | integer_2 | exchange | ticket | consumer_tag
       | global | integer_op | mandatory | write
       | exchange | queue | message_count | auto_delete
       | delivery_tag | arguments | queue | redelivered
       | passive | identifier | identifier | nowait
       | ticket | cluster_id | class_id | nowait
       | nowait | known_hosts | result | frame_max
       | ticket | routing_key | type | redelivered
       | message_count | nowait | method_id | immediate
       | nowait | reply_text | delivery_tag | details
       | durable | identifier | prefetch_size | meta_data
       | exclusive | integer_3 | active | auto_delete
       | string_2 | string_op | nowait | content_checksum
       | locales | ticket | prefetch_size | string_result
       | heartbeat | requeue | prefetch_size | dtx_identifier
       | consumer_tag | passive | response | server_properties
       | routing_key | content_size | mechanism | exchange
       | exchange | consumer_tag | version_major | queue
       | delivery_tag | queue | routing_key | result
       | exclusive | ticket | no_ack | arguments
       | exchange | consumer_tag | exchange | queue
       | immediate | arguments | realm | host
       | consumer_tag | redelivered | ticket | active
       | channel_max | prefetch_count | exchange | ticket
       | message_count | consumer_tag | operation | queue
       | routing_key | nowait )).
-type(amqp_property_record() ::
       ( #'P_connection'{} | #'P_channel'{} | #'P_access'{} | #'P_exchange'{}
       | #'P_queue'{} | #'P_basic'{} | #'P_file'{} | #'P_stream'{}
       | #'P_tx'{} | #'P_dtx'{} | #'P_tunnel'{} | #'P_test'{} )).
-type(amqp_exception() ::
       ( 'frame_method' | 'frame_header' | 'frame_body' | 'frame_oob_method'
       | 'frame_oob_header' | 'frame_oob_body' | 'frame_trace' | 'frame_heartbeat'
       | 'frame_min_size' | 'frame_end' | 'reply_success' | 'not_delivered'
       | 'content_too_large' | 'no_route' | 'no_consumers' | 'access_refused'
       | 'not_found' | 'resource_locked' | 'precondition_failed' | 'connection_forced'
       | 'invalid_path' | 'frame_error' | 'syntax_error' | 'command_invalid'
       | 'channel_error' | 'resource_error' | 'not_allowed' | 'not_implemented'
       | 'internal_error' )).
-type(amqp_exception_code() ::
       ( 1 | 2 | 3 | 4
       | 5 | 6 | 7 | 8
       | 4096 | 206 | 200 | 310
       | 311 | 312 | 313 | 403
       | 404 | 405 | 406 | 320
       | 402 | 501 | 502 | 503
       | 504 | 506 | 530 | 540
       | 541 )).
-endif. % use_specs
